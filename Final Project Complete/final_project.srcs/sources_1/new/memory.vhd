----------------------------------------------------------------------------------
-- Company: 
-- Engineer: 
-- 
-- Create Date: 04/02/2018 04:33:16 PM
-- Design Name: 
-- Module Name: memory - Behavioral
-- Project Name: 
-- Target Devices: 
-- Tool Versions: 
-- Description: 
-- 
-- Dependencies: 
-- 
-- Revision:
-- Revision 0.01 - File Created
-- Additional Comments:
-- 
----------------------------------------------------------------------------------


library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_ARITH.ALL;
use IEEE.STD_LOGIC_UNSIGNED.ALL;

entity memory is
    Port (
        Clk : in std_logic;
        address : in std_logic_vector(15 downto 0);
        write_data : in std_logic_vector(15 downto 0);
        MemWrite : in std_logic;
        read_data : out std_logic_vector(15 downto 0)
    );
end memory;

architecture Behavioral of memory is

type mem_array is array(0 to 511) of std_logic_vector(15 downto 0);
-- define type, for memory arrays

begin

mem_process: process (address, write_data, Clk)
-- initialize data memory, X denotes hexadecimal number

variable data_mem : mem_array := (
-- 00
"0000001000000000", -- load reg0 with 0
"0000011010000000", -- increment reg0 and store in reg2
"0000000000010111", -- add 7 to reg2 and store in reg0
"0000110000000010", -- branch to line 2 if zero
"0000100110000000", -- reg6 = not reg0
"0000010000110000", -- store reg0 at reg6 in memory
"0000111000000010", -- unconditionally branch to line 2
X"0000", X"0000", X"0000", X"0000",X"0000", X"0000", X"0000", X"0000",X"0000",
-- 01
X"0000", X"0000", X"0000",X"0000", X"0000", X"0000", X"0000",X"0000", X"0000", X"0000", X"0000",X"0000", X"0000", X"0000", X"0000",X"0000",
-- 02
X"0000", X"0000", X"0000",X"0000", X"0000", X"0000", X"0000",X"0000", X"0000", X"0000", X"0000",X"0000", X"0000", X"0000", X"0000",X"0000",
-- 03
X"0000", X"0000", X"0000",X"0000", X"0000", X"0000", X"0000",X"0000", X"0000", X"0000", X"0000",X"0000", X"0000", X"0000", X"0000",X"0000",
-- 04
X"0000", X"0000", X"0000",X"0000", X"0000", X"0000", X"0000",X"0000", X"0000", X"0000", X"0000",X"0000", X"0000", X"0000", X"0000",X"0000",
-- 05
X"0000", X"0000", X"0000",X"0000", X"0000", X"0000", X"0000",X"0000", X"0000", X"0000", X"0000",X"0000", X"0000", X"0000", X"0000",X"0000",
-- 06
X"0000", X"0000", X"0000",X"0000", X"0000", X"0000", X"0000",X"0000", X"0000", X"0000", X"0000",X"0000", X"0000", X"0000", X"0000",X"0000",
-- 07
X"0000", X"0000", X"0000",X"0000", X"0000", X"0000", X"0000",X"0000", X"0000", X"0000", X"0000",X"0000", X"0000", X"0000", X"0000",X"0000",
-- 08
X"0000", X"0000", X"0000",X"0000", X"0000", X"0000", X"0000",X"0000", X"0000", X"0000", X"0000",X"0000", X"0000", X"0000", X"0000",X"0000",
-- 09
X"0000", X"0000", X"0000",X"0000", X"0000", X"0000", X"0000",X"0000", X"0000", X"0000", X"0000",X"0000", X"0000", X"0000", X"0000",X"0000",
-- 0A
X"0000", X"0000", X"0000",X"0000", X"0000", X"0000", X"0000",X"0000", X"0000", X"0000", X"0000",X"0000", X"0000", X"0000", X"0000",X"0000",
-- 0B
X"0000", X"0000", X"0000",X"0000", X"0000", X"0000", X"0000",X"0000", X"0000", X"0000", X"0000",X"0000", X"0000", X"0000", X"0000",X"0000",
-- 0C
X"0000", X"0000", X"0000",X"0000", X"0000", X"0000", X"0000",X"0000", X"0000", X"0000", X"0000",X"0000", X"0000", X"0000", X"0000",X"0000",
-- 0D
X"0000", X"0000", X"0000",X"0000", X"0000", X"0000", X"0000",X"0000", X"0000", X"0000", X"0000",X"0000", X"0000", X"0000", X"0000",X"0000",
-- 0E
X"0000", X"0000", X"0000",X"0000", X"0000", X"0000", X"0000",X"0000", X"0000", X"0000", X"0000",X"0000", X"0000", X"0000", X"0000",X"0000",
-- 0F
X"0000", X"0000", X"0000",X"0000", X"0000", X"0000", X"0000",X"0000", X"0000", X"0000", X"0000",X"0000", X"0000", X"0000", X"0000",X"0000",
-- 10
X"0000",X"0000", X"0000", X"0000", X"0000",X"0000", X"0000", X"0000", X"0000",X"0000", X"0000", X"0000", X"0000", X"0000", X"0000",X"0000",
-- 11
X"0000", X"0000", X"0000",X"0000", X"0000", X"0000", X"0000",X"0000", X"0000", X"0000", X"0000",X"0000", X"0000", X"0000", X"0000",X"0000",
-- 12
X"0000", X"0000", X"0000",X"0000", X"0000", X"0000", X"0000",X"0000", X"0000", X"0000", X"0000",X"0000", X"0000", X"0000", X"0000",X"0000",
-- 13
X"0000", X"0000", X"0000",X"0000", X"0000", X"0000", X"0000",X"0000", X"0000", X"0000", X"0000",X"0000", X"0000", X"0000", X"0000",X"0000",
-- 14
X"0000", X"0000", X"0000",X"0000", X"0000", X"0000", X"0000",X"0000", X"0000", X"0000", X"0000",X"0000", X"0000", X"0000", X"0000",X"0000",
-- 15
X"0000", X"0000", X"0000",X"0000", X"0000", X"0000", X"0000",X"0000", X"0000", X"0000", X"0000",X"0000", X"0000", X"0000", X"0000",X"0000",
--16
X"0000", X"0000", X"0000",X"0000", X"0000", X"0000", X"0000",X"0000", X"0000", X"0000", X"0000",X"0000", X"0000", X"0000", X"0000",X"0000",
-- 17
X"0000", X"0000", X"0000",X"0000", X"0000", X"0000", X"0000",X"0000", X"0000", X"0000", X"0000",X"0000", X"0000", X"0000", X"0000",X"0000",
-- 18
X"0000", X"0000", X"0000",X"0000", X"0000", X"0000", X"0000",X"0000", X"0000", X"0000", X"0000",X"0000", X"0000", X"0000", X"0000",X"0000",
-- 19
X"0000", X"0000", X"0000",X"0000", X"0000", X"0000", X"0000",X"0000", X"0000", X"0000", X"0000",X"0000", X"0000", X"0000", X"0000",X"0000",
-- 1A
X"0000", X"0000", X"0000",X"0000", X"0000", X"0000", X"0000",X"0000", X"0000", X"0000", X"0000",X"0000", X"0000", X"0000", X"0000",X"0000",
-- 1B
X"0000", X"0000", X"0000",X"0000", X"0000", X"0000", X"0000",X"0000", X"0000", X"0000", X"0000",X"0000", X"0000", X"0000", X"0000",X"0000",
-- 1C
X"0000", X"0000", X"0000",X"0000", X"0000", X"0000", X"0000",X"0000", X"0000", X"0000", X"0000",X"0000", X"0000", X"0000", X"0000",X"0000",
-- 1D
X"0000", X"0000", X"0000",X"0000", X"0000", X"0000", X"0000",X"0000", X"0000", X"0000", X"0000",X"0000", X"0000", X"0000", X"0000",X"0000",
-- 1E
X"0000", X"0000", X"0000",X"0000", X"0000", X"0000", X"0000",X"0000", X"0000", X"0000", X"0000",X"0000", X"0000", X"0000", X"0000",X"0000",
-- 1F
X"0000", X"0000", X"0000",X"0000", X"0000", X"0000", X"0000",X"0000", X"0000", X"0000", X"0000",X"0000", X"0000", X"0000", X"0000",X"0000");
variable addr:integer;

begin -- the following type conversion function is in std_logic_arith

if rising_edge(Clk) then
    addr:=conv_integer(address(8 downto 0));
    if MemWrite ='1' then
    data_mem(addr):= write_data;
    elsif MemWrite='0' then
    read_data <= data_mem(addr) after 10 ns;
    end if;
end if;
end process;

end Behavioral;